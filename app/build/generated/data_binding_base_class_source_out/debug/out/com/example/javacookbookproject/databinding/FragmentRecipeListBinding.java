// Generated by view binder compiler. Do not edit!
package com.example.javacookbookproject.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.javacookbookproject.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentRecipeListBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button recipe1;

  @NonNull
  public final LinearLayout recipe1Hbox;

  @NonNull
  public final Button recipe2;

  @NonNull
  public final LinearLayout recipe2Hbox;

  @NonNull
  public final Button recipe3;

  @NonNull
  public final LinearLayout recipe3Hbox;

  @NonNull
  public final Button recipe4;

  @NonNull
  public final LinearLayout recipe4Hbox;

  private FragmentRecipeListBinding(@NonNull LinearLayout rootView, @NonNull Button recipe1,
      @NonNull LinearLayout recipe1Hbox, @NonNull Button recipe2, @NonNull LinearLayout recipe2Hbox,
      @NonNull Button recipe3, @NonNull LinearLayout recipe3Hbox, @NonNull Button recipe4,
      @NonNull LinearLayout recipe4Hbox) {
    this.rootView = rootView;
    this.recipe1 = recipe1;
    this.recipe1Hbox = recipe1Hbox;
    this.recipe2 = recipe2;
    this.recipe2Hbox = recipe2Hbox;
    this.recipe3 = recipe3;
    this.recipe3Hbox = recipe3Hbox;
    this.recipe4 = recipe4;
    this.recipe4Hbox = recipe4Hbox;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentRecipeListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentRecipeListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_recipe_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentRecipeListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.recipe1;
      Button recipe1 = ViewBindings.findChildViewById(rootView, id);
      if (recipe1 == null) {
        break missingId;
      }

      id = R.id.recipe1Hbox;
      LinearLayout recipe1Hbox = ViewBindings.findChildViewById(rootView, id);
      if (recipe1Hbox == null) {
        break missingId;
      }

      id = R.id.recipe2;
      Button recipe2 = ViewBindings.findChildViewById(rootView, id);
      if (recipe2 == null) {
        break missingId;
      }

      id = R.id.recipe2Hbox;
      LinearLayout recipe2Hbox = ViewBindings.findChildViewById(rootView, id);
      if (recipe2Hbox == null) {
        break missingId;
      }

      id = R.id.recipe3;
      Button recipe3 = ViewBindings.findChildViewById(rootView, id);
      if (recipe3 == null) {
        break missingId;
      }

      id = R.id.recipe3Hbox;
      LinearLayout recipe3Hbox = ViewBindings.findChildViewById(rootView, id);
      if (recipe3Hbox == null) {
        break missingId;
      }

      id = R.id.recipe4;
      Button recipe4 = ViewBindings.findChildViewById(rootView, id);
      if (recipe4 == null) {
        break missingId;
      }

      id = R.id.recipe4Hbox;
      LinearLayout recipe4Hbox = ViewBindings.findChildViewById(rootView, id);
      if (recipe4Hbox == null) {
        break missingId;
      }

      return new FragmentRecipeListBinding((LinearLayout) rootView, recipe1, recipe1Hbox, recipe2,
          recipe2Hbox, recipe3, recipe3Hbox, recipe4, recipe4Hbox);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
